stages:
  - deploy_staging
  - deploy_production

# Deploy to staging server (automatically)
deploy_staging:
  stage: deploy_staging
  image: alpine:latest
  script:
    # Install SSH client
    - apk add --no-cache openssh-client bash git
    
    # Set up SSH for secure deployment
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan "$STAGING_HOST" >> ~/.ssh/known_hosts
    
    # Deploy using git clone and docker-compose
    - |
      ssh -i ~/.ssh/id_rsa ubuntu@$STAGING_HOST "
        # Install Docker and Docker Compose if not available
        if ! command -v docker &> /dev/null; then
          echo 'Installing Docker...'
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable'
          sudo apt-get update
          sudo apt-get install -y docker-ce
          sudo usermod -aG docker ubuntu
        fi
        
        if ! command -v docker-compose &> /dev/null; then
          echo 'Installing Docker Compose...'
          sudo curl -L \"https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
        fi
        
        # Set up app directory
        mkdir -p ~/app && cd ~/app
        
        # Clone or update the repository
        if [ -d .git ]; then
          git pull
        else
          git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lnu.se/1dv613/student/jp223yp/projects/squadup.git .
        fi
        
        # Set environment variables
        export DOCKER_PORT=${DOCKER_PORT:-8080}
        export SESSION_SECRET=${SESSION_SECRET:-defaultsecret}
        
        # Create docker-compose.yml file if it doesn't exist
        cat > docker-compose.yml << 'EOL'
        version: '3'
        services:
          app:
            container_name: squadup-app
            build:
              context: .
            environment:
              - MONGODB_URI=mongodb://mongo:27017/squadup
              - DB_CONNECTION_STRING=mongodb://mongo:27017/squadup
              - PORT=\${DOCKER_PORT:-3000}
              - BASE_URL=/
              - SESSION_NAME=X9L73KWD82JZF46M5BPTY
              - SESSION_SECRET=\${SESSION_SECRET}
            depends_on:
              - mongo
            ports:
              - \"\${DOCKER_PORT:-3000}:3000\"
          mongo:
            container_name: squadup-mongo
            image: mongo:latest
            volumes:
              - ./volumes/mongodb:/data/db
        volumes:
          mongodb:
        EOL
        
        # Build and start containers
        sudo docker-compose build
        sudo docker-compose down
        sudo docker-compose up -d
      "
  environment:
    name: staging
    url: http://$STAGING_HOST:${DOCKER_PORT:-8080}
  only:
    - main

# Deploy to production server (manual trigger)
deploy_production:
  stage: deploy_production
  image: alpine:latest
  script:
    # Install SSH client
    - apk add --no-cache openssh-client bash git
    
    # Set up SSH for secure deployment
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan "$PRODUCTION_HOST" >> ~/.ssh/known_hosts
    
    # Deploy using git clone and docker-compose
    - |
      ssh -i ~/.ssh/id_rsa ubuntu@$PRODUCTION_HOST "
        # Install Docker and Docker Compose if not available
        if ! command -v docker &> /dev/null; then
          echo 'Installing Docker...'
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable'
          sudo apt-get update
          sudo apt-get install -y docker-ce
          sudo usermod -aG docker ubuntu
        fi
        
        if ! command -v docker-compose &> /dev/null; then
          echo 'Installing Docker Compose...'
          sudo curl -L \"https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
        fi
        
        # Set up app directory
        mkdir -p ~/app-production && cd ~/app-production
        
        # Clone or update the repository
        if [ -d .git ]; then
          git pull
        else
          git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lnu.se/1dv613/student/jp223yp/projects/squadup.git .
        fi
        
        # Set environment variables
        export DOCKER_PORT=${DOCKER_PORT:-80}
        export SESSION_SECRET=${SESSION_SECRET:-defaultsecret}
        export NODE_ENV=production
        
        # Create docker-compose.yml file
        cat > docker-compose.yml << 'EOL'
        version: '3'
        services:
          app:
            container_name: squadup-app
            build:
              context: .
            environment:
              - MONGODB_URI=mongodb://mongo:27017/squadup
              - DB_CONNECTION_STRING=mongodb://mongo:27017/squadup
              - PORT=\${DOCKER_PORT:-3000}
              - BASE_URL=/
              - SESSION_NAME=X9L73KWD82JZF46M5BPTY
              - SESSION_SECRET=\${SESSION_SECRET}
            depends_on:
              - mongo
            ports:
              - \"\${DOCKER_PORT:-3000}:3000\"
          mongo:
            container_name: squadup-mongo
            image: mongo:latest
            volumes:
              - ./volumes/mongodb:/data/db
        volumes:
          mongodb:
        EOL
        
        # Create docker-compose.production.yml file
        cat > docker-compose.production.yml << 'EOL'
        version: '3'
        services:
          app:
            container_name: squadup-app
            build:
              context: .
              dockerfile: Dockerfile.production
            environment:
              - NODE_ENV=production
              - MONGODB_URI=mongodb://mongo:27017/squadup
              - DB_CONNECTION_STRING=mongodb://mongo:27017/squadup
              - PORT=\${DOCKER_PORT:-3000}
              - BASE_URL=/
              - SESSION_NAME=X9L73KWD82JZF46M5BPTY
              - SESSION_SECRET=\${SESSION_SECRET}
            restart: always
            depends_on:
              - mongo
            ports:
              - \"\${DOCKER_PORT:-3000}:3000\"
          mongo:
            container_name: squadup-mongo
            image: mongo:latest
            restart: always
            volumes:
              - mongodb:/data/db
        volumes:
          mongodb:
        EOL
        
        # Build and start containers using production Dockerfile
        sudo docker-compose -f docker-compose.yml -f docker-compose.production.yml build
        sudo docker-compose -f docker-compose.yml -f docker-compose.production.yml down
        sudo docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d
      "
  environment:
    name: production
    url: http://$PRODUCTION_HOST:${DOCKER_PORT:-80}
  when: manual
  only:
    - main