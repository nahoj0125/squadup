stages:
  - build
  - test
  - deploy

# Build stage
build-job:
  stage: build
  script:
    - echo "Building project..."

# Lint test job
lint-job:
  image: node:20
  stage: test
  script:
    - echo "Running linting..."
    - npm install
    - npm run lint || echo "Lint issues found but continuing..."

# Manual approval step before deployment
manual_approval_step:
  stage: deploy
  script:
    - echo "Waiting for manual approval before deployment..."
  when: manual
  only:
    - main

# Production deployment job - simplified approach
deploy_production_job:
  stage: deploy
  environment:
    name: production
    url: http://localhost:8080
  image: docker:20
  services:
    - docker:20-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  before_script:
    - apk add --no-cache openssh-client bash
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts
  script:
    # Copy your docker-compose.production.yaml file (without the EOF artifact)
    - sed '$ d' docker-compose.production.yaml > fixed-docker-compose.yaml
    
    # Copy files to the server
    - scp -o StrictHostKeyChecking=no fixed-docker-compose.yaml ubuntu@$PRODUCTION_HOST:~/docker-compose.yaml
    - scp -o StrictHostKeyChecking=no Dockerfile ubuntu@$PRODUCTION_HOST:~/Dockerfile
    
    # Archive and transfer the application
    - tar --exclude='node_modules' --exclude='.git' -czf app.tar.gz .
    - scp -o StrictHostKeyChecking=no app.tar.gz ubuntu@$PRODUCTION_HOST:~/app.tar.gz
    
    # Deploy on the server
    - |
      ssh -o StrictHostKeyChecking=no ubuntu@$PRODUCTION_HOST "
        # Extract application files
        mkdir -p ~/app
        tar -xzf ~/app.tar.gz -C ~/app
        rm ~/app.tar.gz
        
        # Copy deployment files
        cp ~/Dockerfile ~/app/
        cp ~/docker-compose.yaml ~/app/
        
        # Deploy with Docker Compose
        cd ~/app
        
        # Set environment variables
        export SESSION_SECRET='${SESSION_SECRET}'
        export DOCKER_PORT=8080
        
        # Stop previous containers
        docker-compose -f docker-compose.yaml down || true
        
        # Build and start
        docker-compose -f docker-compose.yaml build --no-cache
        docker-compose -f docker-compose.yaml up -d
        
        # Verify deployment
        docker ps
        docker logs --tail 10 squadup-app || true
        
        echo 'Deployment completed successfully!'
      "
  only:
    - main
  needs:
    - manual_approval_step