stages:
  - deploy_staging
  - deploy_production

# Deploy to staging server (automatically)
deploy_staging:
  stage: deploy_staging
  image: alpine:latest
  script:
    # Install SSH client
    - apk add --no-cache openssh-client bash git
    # Set up SSH for secure deployment
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $STAGING_HOST >> ~/.ssh/known_hosts
    # Deploy using git clone and docker-compose
    - |
      ssh -i ~/.ssh/id_rsa ubuntu@$STAGING_HOST "
        mkdir -p ~/app && cd ~/app
        
        # Clone or update the repository
        if [ -d .git ]; then
          git pull
        else
          git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lnu.se/1dv613/student/jp223yp/projects/squadup.git .
        fi
        
        # Set environment variables
        export DOCKER_PORT=${DOCKER_PORT:-8080}
        export SESSION_SECRET=${SESSION_SECRET}
        
        # Build and start containers
        docker-compose build
        docker-compose down
        docker-compose up -d
      "
  environment:
    name: staging
    url: http://$STAGING_HOST:${DOCKER_PORT:-8080}
  only:
    - main

# Deploy to production server (manual trigger)
deploy_production:
  stage: deploy_production
  image: alpine:latest
  script:
    # Install SSH client
    - apk add --no-cache openssh-client bash git
    # Set up SSH for secure deployment
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $PRODUCTION_HOST >> ~/.ssh/known_hosts
    # Deploy using git clone and docker-compose
    - |
      ssh -i ~/.ssh/id_rsa ubuntu@$PRODUCTION_HOST "
        mkdir -p ~/app-production && cd ~/app-production
        
        # Clone or update the repository
        if [ -d .git ]; then
          git pull
        else
          git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lnu.se/1dv613/student/jp223yp/projects/squadup.git .
        fi
        
        # Set environment variables
        export DOCKER_PORT=${DOCKER_PORT:-80}
        export SESSION_SECRET=${SESSION_SECRET}
        export NODE_ENV=production
        
        # Build and start containers using production Dockerfile
        docker-compose -f docker-compose.yml -f docker-compose.production.yml build
        docker-compose -f docker-compose.yml -f docker-compose.production.yml down
        docker-compose -f docker-compose.yml -f docker-compose.production.yml up -d
      "
  environment:
    name: production
    url: http://$PRODUCTION_HOST:${DOCKER_PORT:-80}
  when: manual
  only:
    - main