stages:
  - build
  - deploy_staging
  - deploy_production

variables:
  DOCKER_TLS_CERTDIR: ""

# Build the Docker images
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA} -f Dockerfile .
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}-prod -f Dockerfile.production .
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}-prod
  only:
    - main

# Deploy to staging server (automatically)
deploy_staging:
  stage: deploy_staging
  image: alpine:latest
  script:
    # Install SSH client
    - apk add --no-cache openssh-client bash
    
    # Set up SSH
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $STAGING_HOST >> ~/.ssh/known_hosts
    
    # Deploy using docker-compose
    - |
      ssh -i ~/.ssh/id_rsa ubuntu@$STAGING_HOST "
        mkdir -p ~/app && cd ~/app
        
        # Create docker-compose.yml file
        cat > docker-compose.yml << 'EOL'
        version: '3'
        services:
          app:
            container_name: squadup-app
            image: ${IMAGE_TAG}
            environment:
              - MONGODB_URI=mongodb://mongo:27017/squadup
              - DB_CONNECTION_STRING=mongodb://mongo:27017/squadup
              - PORT=\${DOCKER_PORT:-3000}
              - BASE_URL=/
              - SESSION_NAME=X9L73KWD82JZF46M5BPTY
              - SESSION_SECRET=\${SESSION_SECRET}
            depends_on:
              - mongo
            ports:
              - \"\${DOCKER_PORT:-3000}:3000\"
          mongo:
            container_name: squadup-mongo
            image: mongo:latest
            volumes:
              - ./volumes/mongodb:/data/db
        volumes:
          mongodb:
        EOL
        
        # Log in and deploy
        export IMAGE_TAG=${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
        export DOCKER_PORT=${DOCKER_PORT:-8080}
        export SESSION_SECRET=${SESSION_SECRET}
        docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
        docker pull $IMAGE_TAG
        docker-compose down
        docker-compose up -d
      "
  environment:
    name: staging
    url: http://$STAGING_HOST:${DOCKER_PORT:-8080}
  only:
    - main

# Deploy to production server (manual trigger)
deploy_production:
  stage: deploy_production
  image: alpine:latest
  script:
    # Install SSH client
    - apk add --no-cache openssh-client bash
    
    # Set up SSH
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $PRODUCTION_HOST >> ~/.ssh/known_hosts
    
    # Deploy using docker-compose
    - |
      ssh -i ~/.ssh/id_rsa ubuntu@$PRODUCTION_HOST "
        mkdir -p ~/app-production && cd ~/app-production
        
        # Create docker-compose.yml file
        cat > docker-compose.yml << 'EOL'
        version: '3'
        services:
          app:
            container_name: squadup-app
            image: ${IMAGE_TAG}
            environment:
              - NODE_ENV=production
              - MONGODB_URI=mongodb://mongo:27017/squadup
              - DB_CONNECTION_STRING=mongodb://mongo:27017/squadup
              - PORT=\${DOCKER_PORT:-3000}
              - BASE_URL=/
              - SESSION_NAME=X9L73KWD82JZF46M5BPTY
              - SESSION_SECRET=\${SESSION_SECRET}
            restart: always
            depends_on:
              - mongo
            ports:
              - \"\${DOCKER_PORT:-3000}:3000\"
          mongo:
            container_name: squadup-mongo
            image: mongo:latest
            restart: always
            volumes:
              - mongodb:/data/db
        volumes:
          mongodb:
        EOL
        
        # Log in and deploy
        export IMAGE_TAG=${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}-prod
        export DOCKER_PORT=${DOCKER_PORT:-80}
        export SESSION_SECRET=${SESSION_SECRET}
        docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
        docker pull $IMAGE_TAG
        docker-compose down
        docker-compose up -d
      "
  environment:
    name: production
    url: http://$PRODUCTION_HOST:${DOCKER_PORT:-80}
  when: manual
  only:
    - main