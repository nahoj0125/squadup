stages:
  - build
  - test
  - deploy

.before_script_ssh_setup: &before_script_ssh_setup
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

build-job:
  image: node:20 # Use a Node.js image with npm pre-installed
  stage: build
  script:
    - npm install
    - npm run dev

lint-job:
  image: node:20 # Use the same Node.js image for consistency
  stage: test
  script:
    - npm install
    - npm run lint
    - npm test

manual_approval_step:
  stage: deploy
  script:
    - echo "Waiting for manual approval..."
  when: manual
  only:
    - main

deploy_production_job:
  stage: deploy
  environment:
    name: production
    url: http://$PRODUCTION_HOST
  variables:
    REMOTE_HOST: $PRODUCTION_HOST
    NODE_ENV: "production"
    PORT: 8080
    MONGO_URI: "mongodb://mongo:27017/squadup"
    SESSION_SECRET: $SESSION_SECRET
    DOCKER_HOST_PORT: $DOCKER_PORT
  before_script: *before_script_ssh_setup
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Deploying to production..."
    - scp -o StrictHostKeyChecking=no ./docker-compose.production.yaml ubuntu@$REMOTE_HOST:~/docker-compose.yaml
    - ssh -o StrictHostKeyChecking=no ubuntu@$REMOTE_HOST "docker-compose down && docker-compose up -d"
  only:
    - main
  needs:
    - manual_approval_step