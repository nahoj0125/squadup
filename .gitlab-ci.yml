stages:
  - build
  - test
  - deploy

.before_script_ssh_setup: &before_script_ssh_setup
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

build-job:
  stage: build
  script:
    - echo "Bygger projektet..."
    - sleep 2

lint-job:
  image: node:20
  stage: test
  script:
    - echo "Running linting..."
    - npm install
    - npm run lint || echo "Lint issues found but continuing..."

manual_approval_step:
  stage: deploy
  script:
    - echo "Väntar på manuellt godkännande innan deploy..."
  when: manual
  only:
    - main

deploy_production_job:
  stage: deploy
  environment:
    name: production
    url: http://$PRODUCTION_HOST
  variables:
    REMOTE_HOST: $PRODUCTION_HOST
    NODE_ENV: "production"
    PORT: 8080
    MONGO_URI: "mongodb://mongo:27017/squadup"
    SESSION_SECRET: $SESSION_SECRET
    DOCKER_HOST_PORT: $DOCKER_PORT
  before_script: *before_script_ssh_setup
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Deploying to production..."
    - apk add --no-cache openssh-client bash git
    - git archive --format=tar.gz -o ./repo.tar.gz HEAD
    - scp -o StrictHostKeyChecking=no ./repo.tar.gz ubuntu@$REMOTE_HOST:~/repo.tar.gz
    - |
      ssh -o StrictHostKeyChecking=no ubuntu@$REMOTE_HOST << EOF
        mkdir -p ~/app;
        cd ~/app;
        tar -xzf ~/repo.tar.gz;
        rm ~/repo.tar.gz;

        cat > docker-compose.production.yaml << 'DOCKER_EOF'
        version: '3'
        services:
          app:
            container_name: squadup-app
            build:
              context: .
            environment:
              - NODE_ENV=production
              - MONGODB_URI=mongodb://mongo:27017/squadup
              - PORT=8080
              - SESSION_SECRET=${SESSION_SECRET:-default_secret}
            ports:
              - '8080:8080'
            restart: always
            depends_on:
              - mongo
          mongo:
            container_name: squadup-mongo
            image: mongo:latest
            volumes:
              - ./data/db:/data/db
            restart: always
        volumes:
          mongodb_data:
        DOCKER_EOF

        sudo docker-compose -f docker-compose.production.yaml down;
        sudo docker-compose -f docker-compose.production.yaml build --no-cache;
        sudo docker-compose -f docker-compose.production.yaml up -d;

        echo 'Deployment completed';
      EOF
  only:
    - main
  needs:
    - manual_approval_step
