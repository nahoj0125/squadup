stages:
  - build
  - test
  - deploy

# Build stage
build-job:
  stage: build
  image: node:20
  script:
    - echo "Building project..."
    - npm install
    - npm run build || echo "No build script found, skipping"
  artifacts:
    paths:
      - dist/
      - node_modules/
    expire_in: 1 hour

# Lint test job
lint-job:
  image: node:20
  stage: test
  script: 
    - echo "Running linting..."
    - npm install
    - npm run lint || echo "No lint script found, skipping"
  dependencies:
    - build-job

# Manual approval step before deployment
manual_approval_step:
  stage: deploy
  script: 
    - echo "Waiting for manual approval before deployment..."
  when: manual
  only: 
    - main

# Production deployment job
deploy_production_job:
  stage: deploy
  environment:
    name: production
    url: https://cscloud8-26.lnu.se
  image: alpine:latest
  script:
    - echo "Deploying to production on $PRODUCTION_HOST..."
    - apk add --no-cache openssh-client bash
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts
    - echo "Setting up deployment scripts"
    - >
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$PRODUCTION_HOST "
      echo '=== Starting deployment process on production server ===' &&
      mkdir -p ~/app &&
      cd ~/app &&
      if [ -d .git ]; then 
        echo 'Updating existing repository...' &&
        git fetch --all && 
        git reset --hard origin/main; 
      else 
        echo 'Cloning repository...' &&
        git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.lnu.se/1dv613/student/jp223yp/projects/squadup.git .;
      fi &&
      echo 'Repository updated' &&
      
      # Install Docker Compose if needed
      if ! command -v docker-compose &> /dev/null; then
        echo 'Installing Docker Compose...' &&
        sudo curl -L \"https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose &&
        sudo chmod +x /usr/local/bin/docker-compose;
      fi &&
      
      echo 'Creating docker-compose file' &&
      echo 'version: \"3\"' > docker-compose.yml &&
      echo 'services:' >> docker-compose.yml &&
      echo '  app:' >> docker-compose.yml &&
      echo '    container_name: squadup-app' >> docker-compose.yml &&
      echo '    build:' >> docker-compose.yml &&
      echo '      context: .' >> docker-compose.yml &&
      echo '    environment:' >> docker-compose.yml &&
      echo '      - NODE_ENV=production' >> docker-compose.yml &&
      echo '      - MONGODB_URI=mongodb://mongo:27017/squadup' >> docker-compose.yml &&
      echo '      - PORT=8080' >> docker-compose.yml &&
      echo '      - SESSION_SECRET=${SESSION_SECRET:-default_secret}' >> docker-compose.yml &&
      echo '    ports:' >> docker-compose.yml &&
      echo '      - \"8080:8080\"' >> docker-compose.yml &&
      echo '    restart: always' >> docker-compose.yml &&
      echo '    depends_on:' >> docker-compose.yml &&
      echo '      - mongo' >> docker-compose.yml &&
      echo '  mongo:' >> docker-compose.yml &&
      echo '    container_name: squadup-mongo' >> docker-compose.yml &&
      echo '    image: mongo:latest' >> docker-compose.yml &&
      echo '    volumes:' >> docker-compose.yml &&
      echo '      - ./data/db:/data/db' >> docker-compose.yml &&
      echo '    restart: always' >> docker-compose.yml &&
      
      echo 'Building and starting containers' &&
      sudo docker-compose down &&
      sudo docker-compose build --no-cache &&
      sudo docker-compose up -d &&
      
      echo 'Verifying deployment' &&
      sudo docker ps &&
      sudo docker logs --tail 10 squadup-app &&
      
      echo 'Deployment completed - Application available at https://cscloud8-26.lnu.se'
      "
  only:
    - main
  needs:
    - manual_approval_step